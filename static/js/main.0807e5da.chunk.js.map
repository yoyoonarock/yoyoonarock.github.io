{"version":3,"sources":["assets/food-pictures/cauliflower-rice-and-tikka-masala.jpg","assets/food-pictures/dahi-toast.jpg","assets/food-pictures/mango-rus.jpg","assets/food-pictures/papdi-chaat.jpg","assets/food-pictures/pav-bhaji.jpg","assets/food-pictures/samosa.jpg","assets/food-pictures/shrikhand.jpg","components/food/food-picture-list.tsx","components/dual-input-answer.tsx","components/prompt.tsx","components/basic-page.tsx","components/about/about-page.tsx","components/cake/cake-page.tsx","components/dance/dance-page.tsx","components/word-puzzle/word-puzzle-base.tsx","components/food/food-page.tsx","components/schedule/schedule-page.tsx","components/shows/shows-page.tsx","constants.ts","components/word-puzzle/word-puzzle-page.tsx","components/workout/workout-page.tsx","components/app.tsx","theme.ts","index.tsx"],"names":["module","exports","Food","ImageSide","DualInputAnswer","answer","color","completed","setCompleted","React","useState","firstInputValue","setFirstInputValue","secondInputValue","setSecondInputValue","split","firstHalfAnswer","secondHalfAnswer","checkCompletion","firstValue","secondValue","className","style","border","Input","value","onChange","target","Prompt","text","BasicPage","activity","description","Alert","severity","AboutPage","useEffect","CakePage","DancePage","CircleType","document","getElementById","radius","dir","id","FILLER","KeyboardKey","FoodPictureList","identifiedPictures","setIdentifiedPictures","cauliRiceCompleted","setCauliRiceCompleted","dahiToastCompleted","setDahiToastCompleted","mangoRusCompleted","setMangoRusCompleted","papdiChaatCompleted","setPapdiChaatCompleted","pavBhajiCompleted","setPavBhajiCompleted","samosaCompleted","setSamosaCompleted","shrikhandCompleted","setShrikhandCompleted","tikkaMasalaCompleted","setTikkaMasalaCompleted","foodMap","CAULI_RICE","label","source","cauliRiceTikkaMasala","DAHI_TOAST","dahiToast","MANGO_RUS","mangoRus","PAPDI_CHAAT","papdiChaat","PAV_BHAJI","pavBhaji","SAMOSA","samosa","SHRIKHAND","shrikhand","TIKKA_MASALA","FoodInput","ImageContainer","food","imageSide","inputValue","setInputValue","LEFT","src","alt","toLowerCase","RIGHT","DualAnswerContainer","leftFood","rightFood","leftAnswer","leftCompleted","leftLabel","leftSource","setLeftCompleted","rightAnswer","rightCompleted","rightLabel","setRightCompleted","leftInputValue","setLeftInputValue","rightInputValue","setRightInputValue","FoodPage","SchedulePage","scheduleArray","everythingCompleted","map","schedule","ShowsPage","Color","WordPuzzleBase","inputWords","totalWordLength","currentPuzzleInput","setCurrentPuzzleInput","MAX_WORD_LENGTH","reduce","currentMaxLength","word","length","GRID_HEIGHT","GRID_WIDTH","SOLUTION","join","refs","useRef","usedRefs","Array","fill","staticHeightArray","staticWidthArray","mapWordLetterToRefIndex","wordIndex","letterIndex","refIndex","i","findPreviousRef","findNextRef","handleNewCharInput","input","current","newPuzzleInput","substr","isPuzzleSolved","nextRefIndex","loopingIndex","findNextEmptyRef","focus","getGridCells","rowIndex","_","columnIndex","currentWord","key","disabled","maxLength","onKeyDown","e","ARROW_LEFT","ARROW_RIGHT","Object","values","includes","newRefIndex","select","handleArrowKeyDown","onKeyPress","toUpperCase","handleOnKeyPress","ref","el","type","MESSAGE_DIGITS","WordPuzzlePage","message","j","letter","getMessage","WorkoutPage","WORD_PUZZLE_WORDS","TOTAL_WORD_LENGTH","currentTotalLength","TabPanel","props","children","index","role","hidden","aria-labelledby","Box","p","Typography","App","selectedTabIndex","setSelectedTabIndex","aboutActivityCompleted","setAboutActivityCompleted","cakeActivityCompleted","setCakeActivityCompleted","danceActivityCompleted","setDanceActivityCompleted","foodActivityCompleted","setFoodActivityCompleted","showsActivityCompleted","setShowsActivityCompleted","workoutActivityCompleted","setWorkoutActivityCompleted","wordPuzzleCompleted","setWordPuzzleCompleted","repeat","wordPuzzleInput","setWordPuzzleInput","setScheduleArray","setEverythingCompleted","updatedSchedule","RED","ORANGE","YELLOW","GREEN","BLUE","PURPLE","MAGENTA","Paper","square","Tabs","event","newIndex","indicatorColor","textColor","centered","Tab","theme","createMuiTheme","typography","button","textTransform","ReactDOM","render","ThemeProvider"],"mappings":"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","file":"static/js/main.0807e5da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cauliflower-rice-and-tikka-masala.a3a623e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dahi-toast.1b7bd73e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mango-rus.8c455493.jpg\";","module.exports = __webpack_public_path__ + \"static/media/papdi-chaat.29ccd985.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pav-bhaji.9e3a56cb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/samosa.8782b345.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shrikhand.0356da79.jpg\";","import React from \"react\";\n\nimport Input from \"@material-ui/core/Input\";\n\nimport cauliRiceTikkaMasala from \"../../assets/food-pictures/cauliflower-rice-and-tikka-masala.jpg\";\nimport dahiToast from \"../../assets/food-pictures/dahi-toast.jpg\";\nimport mangoRus from \"../../assets/food-pictures/mango-rus.jpg\";\nimport papdiChaat from \"../../assets/food-pictures/papdi-chaat.jpg\";\nimport pavBhaji from \"../../assets/food-pictures/pav-bhaji.jpg\";\nimport samosa from \"../../assets/food-pictures/samosa.jpg\";\nimport shrikhand from \"../../assets/food-pictures/shrikhand.jpg\";\n\nenum Food {\n\tCAULI_RICE = \"cauliflower rice\",\n\tDAHI_TOAST = \"dahi toast\",\n\tMANGO_RUS = \"mango rus\",\n\tPAPDI_CHAAT = \"papdi chaat\",\n\tPAV_BHAJI = \"pav bhaji\",\n\tSAMOSA = \"samosa\",\n\tSHRIKHAND = \"shrikhand\",\n\tTIKKA_MASALA = \"tikka masala\",\n}\n\nenum ImageSide {\n\tLEFT = \"left\",\n\tRIGHT = \"right\",\n}\n\ninterface DualAnswerContainerProps {\n\tleftFood: Food;\n\trightFood: Food;\n}\n\ninterface FoodInputProps {\n\tanswer: string;\n\tcompleted: boolean;\n\tlabel: string;\n\tvalue: string;\n\tonChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\ninterface FoodPictureListProps {\n\tidentifiedPictures: boolean;\n\tsetIdentifiedPictures: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ninterface ImageContainerProps {\n\tfood: Food;\n\timageSide: ImageSide;\n}\n\nexport const FoodPictureList = ({ identifiedPictures, setIdentifiedPictures }: FoodPictureListProps) => {\n\tconst [cauliRiceCompleted, setCauliRiceCompleted] = React.useState(false);\n\tconst [dahiToastCompleted, setDahiToastCompleted] = React.useState(false);\n\tconst [mangoRusCompleted, setMangoRusCompleted] = React.useState(false);\n\tconst [papdiChaatCompleted, setPapdiChaatCompleted] = React.useState(false);\n\tconst [pavBhajiCompleted, setPavBhajiCompleted] = React.useState(false);\n\tconst [samosaCompleted, setSamosaCompleted] = React.useState(false);\n\tconst [shrikhandCompleted, setShrikhandCompleted] = React.useState(false);\n\tconst [tikkaMasalaCompleted, setTikkaMasalaCompleted] = React.useState(false);\n\n\tconst foodMap = {\n\t\t[Food.CAULI_RICE]: {\n\t\t\tanswer: \"cauliflower rice\",\n\t\t\tcompleted: cauliRiceCompleted,\n\t\t\tlabel: \"D) \",\n\t\t\tsource: cauliRiceTikkaMasala,\n\t\t\tsetCompleted: setCauliRiceCompleted,\n\t\t},\n\t\t[Food.DAHI_TOAST]: {\n\t\t\tanswer: \"dahi toast\",\n\t\t\tcompleted: dahiToastCompleted,\n\t\t\tlabel: \"A) \",\n\t\t\tsource: dahiToast,\n\t\t\tsetCompleted: setDahiToastCompleted,\n\t\t},\n\t\t[Food.MANGO_RUS]: {\n\t\t\tanswer: \"mango rus\",\n\t\t\tcompleted: mangoRusCompleted,\n\t\t\tlabel: \"E) \",\n\t\t\tsource: mangoRus,\n\t\t\tsetCompleted: setMangoRusCompleted,\n\t\t},\n\t\t[Food.PAPDI_CHAAT]: {\n\t\t\tanswer: \"papdi chaat\",\n\t\t\tcompleted: papdiChaatCompleted,\n\t\t\tlabel: \"B) \",\n\t\t\tsource: papdiChaat,\n\t\t\tsetCompleted: setPapdiChaatCompleted,\n\t\t},\n\t\t[Food.PAV_BHAJI]: {\n\t\t\tanswer: \"pav bhaji\",\n\t\t\tcompleted: pavBhajiCompleted,\n\t\t\tlabel: \"G) \",\n\t\t\tsource: pavBhaji,\n\t\t\tsetCompleted: setPavBhajiCompleted,\n\t\t},\n\t\t[Food.SAMOSA]: {\n\t\t\tanswer: \"samosa\",\n\t\t\tcompleted: samosaCompleted,\n\t\t\tlabel: \"F) \",\n\t\t\tsource: samosa,\n\t\t\tsetCompleted: setSamosaCompleted,\n\t\t},\n\t\t[Food.SHRIKHAND]: {\n\t\t\tanswer: \"shrikhand\",\n\t\t\tcompleted: shrikhandCompleted,\n\t\t\tlabel: \"C) \",\n\t\t\tsource: shrikhand,\n\t\t\tsetCompleted: setShrikhandCompleted,\n\t\t},\n\t\t[Food.TIKKA_MASALA]: {\n\t\t\tanswer: \"tikka masala\",\n\t\t\tcompleted: tikkaMasalaCompleted,\n\t\t\tlabel: \"H) \",\n\t\t\tsource: cauliRiceTikkaMasala,\n\t\t\tsetCompleted: setTikkaMasalaCompleted,\n\t\t},\n\t};\n\n\tReact.useEffect(() => {\n\t\tconst checkIdentified = () => {\n\t\t\tconst identified =\n\t\t\t\tcauliRiceCompleted &&\n\t\t\t\tdahiToastCompleted &&\n\t\t\t\tmangoRusCompleted &&\n\t\t\t\tpapdiChaatCompleted &&\n\t\t\t\tpavBhajiCompleted &&\n\t\t\t\tsamosaCompleted &&\n\t\t\t\tshrikhandCompleted &&\n\t\t\t\ttikkaMasalaCompleted;\n\n\t\t\tsetIdentifiedPictures(identified);\n\t\t};\n\n\t\tcheckIdentified();\n\t}, [\n\t\tcauliRiceCompleted,\n\t\tdahiToastCompleted,\n\t\tmangoRusCompleted,\n\t\tpapdiChaatCompleted,\n\t\tpavBhajiCompleted,\n\t\tsamosaCompleted,\n\t\tshrikhandCompleted,\n\t\ttikkaMasalaCompleted,\n\t\tsetIdentifiedPictures,\n\t]);\n\n\tconst FoodInput = ({ answer, completed, label, value, onChange }: FoodInputProps) => {\n\t\treturn (\n\t\t\t<div className='food-input-container'>\n\t\t\t\t<p className='food-letter'>{label}</p>\n\t\t\t\t{!completed && <Input value={value} onChange={onChange} />}\n\t\t\t\t{completed && <p className='food-answer'>{answer}</p>}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tconst ImageContainer = ({ food, imageSide }: ImageContainerProps) => {\n\t\tconst { answer, completed, label, source, setCompleted } = foodMap[food];\n\n\t\tconst [inputValue, setInputValue] = React.useState(\"\");\n\n\t\tconst handleChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tsetInputValue(value.toLowerCase());\n\n\t\t\tif (value.toLowerCase() === answer) {\n\t\t\t\tsetCompleted(true);\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<div className='image-container'>\n\t\t\t\t{imageSide === ImageSide.LEFT && <img className='image' src={source} alt='' />}\n\t\t\t\t<FoodInput\n\t\t\t\t\tanswer={answer}\n\t\t\t\t\tcompleted={completed}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t/>\n\t\t\t\t{imageSide === ImageSide.RIGHT && <img className='image' src={source} alt='' />}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tconst DualAnswerContainer = ({ leftFood, rightFood }: DualAnswerContainerProps) => {\n\t\tconst {\n\t\t\tanswer: leftAnswer,\n\t\t\tcompleted: leftCompleted,\n\t\t\tlabel: leftLabel,\n\t\t\tsource: leftSource,\n\t\t\tsetCompleted: setLeftCompleted,\n\t\t} = foodMap[leftFood];\n\t\tconst {\n\t\t\tanswer: rightAnswer,\n\t\t\tcompleted: rightCompleted,\n\t\t\tlabel: rightLabel,\n\t\t\tsetCompleted: setRightCompleted,\n\t\t} = foodMap[rightFood];\n\n\t\tconst [leftInputValue, setLeftInputValue] = React.useState(\"\");\n\t\tconst [rightInputValue, setRightInputValue] = React.useState(\"\");\n\n\t\tconst handleLeftChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tsetLeftInputValue(value.toLowerCase());\n\n\t\t\tif (value.toLowerCase() === leftAnswer) {\n\t\t\t\tsetLeftCompleted(true);\n\t\t\t}\n\t\t};\n\n\t\tconst handleRightChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tsetRightInputValue(value.toLowerCase());\n\n\t\t\tif (value.toLowerCase() === rightAnswer) {\n\t\t\t\tsetRightCompleted(true);\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<div className='image-container'>\n\t\t\t\t<FoodInput\n\t\t\t\t\tanswer={leftAnswer}\n\t\t\t\t\tcompleted={leftCompleted}\n\t\t\t\t\tlabel={leftLabel}\n\t\t\t\t\tonChange={handleLeftChange}\n\t\t\t\t\tvalue={leftInputValue}\n\t\t\t\t/>\n\t\t\t\t<img className='image' src={leftSource} alt='' />\n\t\t\t\t<FoodInput\n\t\t\t\t\tanswer={rightAnswer}\n\t\t\t\t\tcompleted={rightCompleted}\n\t\t\t\t\tlabel={rightLabel}\n\t\t\t\t\tonChange={handleRightChange}\n\t\t\t\t\tvalue={rightInputValue}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className='food-picture-list'>\n\t\t\t<div className='food-picture-row'>\n\t\t\t\t<ImageContainer food={Food.DAHI_TOAST} imageSide={ImageSide.RIGHT} />\n\t\t\t\t<ImageContainer food={Food.MANGO_RUS} imageSide={ImageSide.LEFT} />\n\t\t\t</div>\n\t\t\t<div className='food-picture-row'>\n\t\t\t\t<ImageContainer food={Food.PAPDI_CHAAT} imageSide={ImageSide.RIGHT} />\n\t\t\t\t<ImageContainer food={Food.SAMOSA} imageSide={ImageSide.LEFT} />\n\t\t\t</div>\n\t\t\t<div className='food-picture-row'>\n\t\t\t\t<ImageContainer food={Food.SHRIKHAND} imageSide={ImageSide.RIGHT} />\n\t\t\t\t<ImageContainer food={Food.PAV_BHAJI} imageSide={ImageSide.LEFT} />\n\t\t\t</div>\n\t\t\t<div className='food-picture-row last-row'>\n\t\t\t\t<DualAnswerContainer leftFood={Food.CAULI_RICE} rightFood={Food.TIKKA_MASALA} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport Input from \"@material-ui/core/Input\";\n\nimport { Color } from \"../constants\";\n\nimport \"../styles/dual-input-answer.scss\";\n\ninterface DualInputProps {\n\tanswer: string;\n\tcolor: Color;\n\tcompleted: boolean;\n\tsetCompleted?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const DualInputAnswer = ({ answer, color, completed, setCompleted }: DualInputProps) => {\n\tconst [firstInputValue, setFirstInputValue] = React.useState(\"\");\n\tconst [secondInputValue, setSecondInputValue] = React.useState(\"\");\n\n\tconst [firstHalfAnswer, secondHalfAnswer] = answer.split(\" / \");\n\n\tconst checkCompletion = (firstValue: string, secondValue: string) => {\n\t\tsetCompleted && setCompleted(firstValue === firstHalfAnswer && secondValue === secondHalfAnswer);\n\t};\n\n\tconst handleFirstInputChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetFirstInputValue(value);\n\t\tcheckCompletion(value, secondInputValue);\n\t};\n\n\tconst handleSecondInputChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetSecondInputValue(value);\n\t\tcheckCompletion(firstInputValue, value);\n\t};\n\n\treturn (\n\t\t<div className='final-answer' style={{ border: `4px ${color} solid` }}>\n\t\t\t{!completed &&\n\t\t\t\t(setCompleted ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Input value={firstInputValue} onChange={handleFirstInputChange} />\n\t\t\t\t\t\t<p className='rhyme-divider'>{\" / \"}</p>\n\t\t\t\t\t\t<Input value={secondInputValue} onChange={handleSecondInputChange} />\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<p className='final-answer-label'>?</p>\n\t\t\t\t))}\n\t\t\t{completed && <p className='final-answer-label'>{answer}</p>}\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport \"../styles/prompt.scss\";\n\ninterface Props {\n\ttext: string;\n}\n\nexport const Prompt = ({ text }: Props) => {\n\treturn <p className='prompt'>{text}</p>;\n};\n","import React from \"react\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport { DualInputAnswer } from \"./dual-input-answer\";\nimport { Prompt } from \"./prompt\";\n\ninterface Props {\n\tactivity: Activity;\n\tdescription: string;\n\tsetCompleted?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const BasicPage = ({ activity, description, setCompleted }: Props) => {\n\tconst { completed } = activity;\n\n\treturn (\n\t\t<div className='basic-page'>\n\t\t\t<Prompt text={description} />\n\t\t\t<DualInputAnswer {...activity} setCompleted={setCompleted} />\n\t\t\t{setCompleted && completed && <Alert severity='success'>well done!</Alert>}\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport { BasicPage } from \"../basic-page\";\n\nconst ABOUT_DESCRIPTION = `happy birthday saloni! it's your special day\nlet's hang out, what do you say?\nbut as you know my memory is poor\nall I know is that you're turning 24\nthere was an agenda, a detailed list\nbut everything I had planned now fails to exist\nsolve the puzzles, look through the clues\ncause I don't remember what we were gonna do!`;\n\ninterface Props {\n\tactivity: Activity;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const AboutPage = ({ activity, setCompleted }: Props) => {\n\tReact.useEffect(() => {\n\t\tsetCompleted(true);\n\t}, [setCompleted]);\n\n\treturn <BasicPage activity={activity} description={ABOUT_DESCRIPTION} />;\n};\n","import React from \"react\";\n\nimport { BasicPage } from \"../basic-page\";\n\nconst CAKE_DESCRIPTION = `unfortunately there's no puzzle on this one\nmore creative ideas? nope I had none\nthere's only so much I can do\nso this one's a freebie for you`;\n\ninterface Props {\n\tactivity: Activity;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const CakePage = ({ activity, setCompleted }: Props) => {\n\tReact.useEffect(() => {\n\t\tsetCompleted(true);\n\t}, [setCompleted]);\n\n\treturn <BasicPage activity={activity} description={CAKE_DESCRIPTION} />;\n};\n","import React from \"react\";\nimport CircleType from \"circletype\";\n\nimport { BasicPage } from \"../basic-page\";\n\nimport \"../../styles/dance/dance.scss\";\n\nconst DANCE_DESCRIPTION = `now that there's been a wall restore\nyou may have seen these shapes before\nthe screen looks a little different though\nit was so hard to code just so you know\nthere's a couple colors, let's start with your fave\nthen use the shade of the person that you crave\nfinally choose circles but only every fourth gold\nwith all this you will see the entire phrase unfold`;\n\ninterface Props {\n\tactivity: Activity;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst FILLER = \"XXXXXXXXXXXX\";\n\nconst BOTTOM_CIRCLE_LETTERS = \"jwoxhbfapxtweil\";\nconst UPPER_LEFT_LETTERS = FILLER + \"agscrbtenkhi\";\nconst UPPER_RIGHT_LETTERS = \"adentucriehd\" + FILLER;\nconst LOWER_LEFT_LETTERS = FILLER + \"badkcnytvcno\";\nconst LOWER_RIGHT_LETTERS = \"weekvlgdeebai\" + FILLER;\n\nexport const DancePage = ({ activity, setCompleted }: Props) => {\n\tReact.useEffect(() => {\n\t\tnew CircleType(document.getElementById(\"bottom-circle-letters\")).radius(150).dir(-1);\n\t\tnew CircleType(document.getElementById(\"upper-left-letters\")).radius(250).dir(-1);\n\t\tnew CircleType(document.getElementById(\"upper-right-letters\")).radius(250).dir(-1);\n\t\tnew CircleType(document.getElementById(\"lower-left-letters\")).radius(175).dir(-1);\n\t\tnew CircleType(document.getElementById(\"lower-right-letters\")).radius(175).dir(-1);\n\t}, []);\n\n\treturn (\n\t\t<div className='dance-page'>\n\t\t\t<span className='curved-text-clues'>\n\t\t\t\t<p id='bottom-circle-letters'>{BOTTOM_CIRCLE_LETTERS}</p>\n\t\t\t\t<span>\n\t\t\t\t\t<p id='upper-left-letters'>{UPPER_LEFT_LETTERS}</p>\n\t\t\t\t\t<p id='upper-right-letters'>{UPPER_RIGHT_LETTERS}</p>\n\t\t\t\t</span>\n\t\t\t\t<span>\n\t\t\t\t\t<p id='lower-left-letters'>{LOWER_LEFT_LETTERS}</p>\n\t\t\t\t\t<p id='lower-right-letters'>{LOWER_RIGHT_LETTERS}</p>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t<BasicPage activity={activity} description={DANCE_DESCRIPTION} setCompleted={setCompleted} />\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nenum KeyboardKey {\n\tARROW_LEFT = \"ArrowLeft\",\n\tARROW_RIGHT = \"ArrowRight\",\n}\n\ninterface Props {\n\tcurrentPuzzleInput: string;\n\tinputWords: string[];\n\ttotalWordLength: number;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n\tsetCurrentPuzzleInput: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const WordPuzzleBase = ({\n\tinputWords,\n\ttotalWordLength,\n\tcurrentPuzzleInput,\n\tsetCurrentPuzzleInput,\n\tsetCompleted,\n}: Props) => {\n\tconst MAX_WORD_LENGTH = inputWords.reduce((currentMaxLength, word) => {\n\t\treturn word.length > currentMaxLength ? word.length : currentMaxLength;\n\t}, 0);\n\n\tconst GRID_HEIGHT = inputWords.length * 2 + 1;\n\tconst GRID_WIDTH = MAX_WORD_LENGTH + 2;\n\n\tconst SOLUTION = inputWords.join(\"\");\n\n\tconst refs = React.useRef<HTMLInputElement[]>([]);\n\tconst usedRefs = Array(totalWordLength).fill(false);\n\n\tconst staticHeightArray = Array(GRID_HEIGHT).fill(0);\n\tconst staticWidthArray = Array(GRID_WIDTH).fill(0);\n\n\tconst mapWordLetterToRefIndex = (wordIndex: number, letterIndex: number): number => {\n\t\tconst index = inputWords.reduce((refIndex, word, i) => {\n\t\t\tif (i > wordIndex) {\n\t\t\t\treturn refIndex;\n\t\t\t}\n\n\t\t\tif (i === wordIndex) {\n\t\t\t\treturn refIndex + letterIndex;\n\t\t\t}\n\n\t\t\treturn refIndex + word.length;\n\t\t}, 0);\n\n\t\treturn index;\n\t};\n\n\tconst findPreviousRef = (refIndex: number): number => {\n\t\treturn refIndex === 0 ? totalWordLength - 1 : refIndex - 1;\n\t};\n\n\tconst findNextRef = (refIndex: number): number => {\n\t\treturn refIndex === totalWordLength - 1 ? 0 : refIndex + 1;\n\t};\n\n\tconst handleArrowKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, refIndex: number) => {\n\t\tconst map = {\n\t\t\t[KeyboardKey.ARROW_LEFT]: findPreviousRef,\n\t\t\t[KeyboardKey.ARROW_RIGHT]: findNextRef,\n\t\t};\n\n\t\tif (!Object.values(KeyboardKey).includes(e.key as KeyboardKey)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newRefIndex = map[e.key as KeyboardKey](refIndex);\n\n\t\trefs.current[newRefIndex].focus();\n\t\trefs.current[newRefIndex].select();\n\t};\n\n\tconst handleOnKeyPress = ({ key }: React.KeyboardEvent<HTMLInputElement>, refIndex: number) => {\n\t\thandleNewCharInput(key.toUpperCase(), refIndex);\n\t};\n\n\tconst handleNewCharInput = (input: string, refIndex: number) => {\n\t\trefs.current[refIndex].value = input;\n\t\tconst newPuzzleInput = currentPuzzleInput.substr(0, refIndex) + input + currentPuzzleInput.substr(refIndex + 1);\n\t\tsetCurrentPuzzleInput(newPuzzleInput);\n\t\tif (isPuzzleSolved(newPuzzleInput)) {\n\t\t\tsetCompleted(true);\n\t\t}\n\n\t\tusedRefs[refIndex] = true;\n\n\t\tconst findNextEmptyRef = () => {\n\t\t\tlet loopingIndex = findNextRef(refIndex);\n\n\t\t\twhile (loopingIndex !== refIndex) {\n\t\t\t\tif (!usedRefs[loopingIndex]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tloopingIndex = findNextRef(loopingIndex);\n\t\t\t}\n\n\t\t\tif (loopingIndex === refIndex) {\n\t\t\t\tloopingIndex = findNextRef(loopingIndex);\n\t\t\t}\n\n\t\t\treturn loopingIndex;\n\t\t};\n\n\t\tconst nextRefIndex = findNextEmptyRef();\n\t\trefs.current[nextRefIndex].focus();\n\t};\n\n\tconst isPuzzleSolved = (input: string): boolean => {\n\t\treturn input.toLowerCase() === SOLUTION.toLowerCase();\n\t};\n\n\tconst getGridCells = (rowIndex: number) => {\n\t\treturn staticWidthArray.map((_, columnIndex) => {\n\t\t\tif (rowIndex % 2 === 1) {\n\t\t\t\tconst wordIndex = (rowIndex - 1) / 2;\n\t\t\t\tconst currentWord = inputWords[wordIndex];\n\n\t\t\t\treturn (\n\t\t\t\t\t<td className='cell-background' key={columnIndex}>\n\t\t\t\t\t\t{columnIndex !== 0 && columnIndex <= currentWord.length && (\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclassName='cell-input'\n\t\t\t\t\t\t\t\tdisabled={isPuzzleSolved(currentPuzzleInput)}\n\t\t\t\t\t\t\t\tkey={mapWordLetterToRefIndex(wordIndex, columnIndex - 1)}\n\t\t\t\t\t\t\t\tmaxLength={1}\n\t\t\t\t\t\t\t\tonKeyDown={(e) =>\n\t\t\t\t\t\t\t\t\thandleArrowKeyDown(e, mapWordLetterToRefIndex(wordIndex, columnIndex - 1))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonKeyPress={(e) =>\n\t\t\t\t\t\t\t\t\thandleOnKeyPress(e, mapWordLetterToRefIndex(wordIndex, columnIndex - 1))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tref={(el) => (refs.current = [...refs.current, el] as HTMLInputElement[])}\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</td>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn <td className='cell-background' key={columnIndex}></td>;\n\t\t});\n\t};\n\n\treturn (\n\t\t<table className='grid'>\n\t\t\t<tbody>\n\t\t\t\t{staticHeightArray.map((_, i) => (\n\t\t\t\t\t<tr key={i}>{getGridCells(i)}</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n};\n","import React from \"react\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport { DualInputAnswer } from \"../dual-input-answer\";\nimport { FoodPictureList } from \"./food-picture-list\";\nimport { Prompt } from \"../prompt\";\n\nimport \"../../styles/food/food.scss\";\n\nconst LETTER_CLUES = `D9 A3 H5 H1 ' C1\nB6 D8 D8 H3 G8 E3 '\n / \nE4 F4 F4 C9\nH10 D8 D8 H3 G8 E3 '`;\n\ninterface Props {\n\tactivity: Activity;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const FoodPage = ({ activity, setCompleted }: Props) => {\n\tconst { completed } = activity;\n\n\tconst [identifiedPictures, setIdentifiedPictures] = React.useState(true);\n\n\treturn (\n\t\t<div className='food-page'>\n\t\t\t<FoodPictureList identifiedPictures={identifiedPictures} setIdentifiedPictures={setIdentifiedPictures} />\n\t\t\t<span className='description'>\n\t\t\t\t<Prompt text={identifiedPictures ? LETTER_CLUES : \"\"} />\n\t\t\t\t<DualInputAnswer {...activity} setCompleted={setCompleted} />\n\t\t\t\t{completed && <Alert severity='success'>well done!</Alert>}\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport { DualInputAnswer } from \"../dual-input-answer\";\n\nimport \"../../styles/schedule/schedule.scss\";\n\nconst FINAL_RHYME = `you did it! what can I say\nyou saved this saturday\nhopefully you can see\nthe past week I was super busy\nthere was a lot of pressure\nbut now let's go on an adventure!\nsince we're both free\nwill you go on a date with me?`;\n\ninterface Props {\n\tscheduleArray: Activity[];\n\teverythingCompleted: boolean;\n}\n\nexport const SchedulePage = ({ scheduleArray, everythingCompleted }: Props) => {\n\treturn (\n\t\t<div className='schedule-page'>\n\t\t\t<div className='schedule'>\n\t\t\t\t{scheduleArray.map((schedule) => (\n\t\t\t\t\t<DualInputAnswer {...schedule} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{everythingCompleted && (\n\t\t\t\t<div className='final-rhyme'>\n\t\t\t\t\t<p>{FINAL_RHYME}</p>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport { BasicPage } from \"../basic-page\";\n\nconst SHOWS_DESCRIPTION = `last one for today, let's take it easy\nwe don't want to end up too sleepy\nthese may appear on our machines\nor be hooked up to larger screens\nnow what if you are far away?\nwhat will help you view the display?\nthere are 4 of yours and 4 of mine\nhopefully you'll be able to see just fine`;\n\ninterface Props {\n\tactivity: Activity;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const ShowsPage = ({ activity, setCompleted }: Props) => {\n\treturn <BasicPage activity={activity} description={SHOWS_DESCRIPTION} setCompleted={setCompleted} />;\n};\n","export enum Color {\n\tRED = \"red\",\n\tORANGE = \"orange\",\n\tYELLOW = \"yellow\",\n\tGREEN = \"green\",\n\tBLUE = \"blue\",\n\tPURPLE = \"purple\",\n\tMAGENTA = \"magenta\",\n}\n","import React from \"react\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport { WordPuzzleBase } from \"./word-puzzle-base\";\nimport { Prompt } from \"../prompt\";\n\nimport \"../../styles/word-puzzle/word-puzzle.scss\";\n\nconst WORD_PUZZLE_DESCRIPTION = `for this challenge think of a category\nwe'll have them in hand when telling a story\nin general they are extremely versatile\nbut we'll typically just munch on them for a while\nwe usually use bowls but they fit in cups\nwhen we're feeling lazy they're the backups\nmake sure to look inside a familiar container\nwith that clue, solving this is a no brainer`;\n\nconst MESSAGE_DIGITS = [\n\t[20, 42, 5, `'`, 14],\n\t[40, 10],\n\t[33, 23, 8, 47, 9, 16, 41],\n\t[\"/\"],\n\t[2, 24, 39, `'`, 22],\n\t[29, 18, 49],\n\t[6, 44, 12, 19, 24, 41],\n];\n\ninterface Props {\n\tactivity: Activity;\n\tcurrentPuzzleInput: string;\n\tinputWords: string[];\n\ttotalWordLength: number;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n\tsetCurrentPuzzleInput: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const WordPuzzlePage = ({\n\tactivity,\n\tcurrentPuzzleInput,\n\tinputWords,\n\ttotalWordLength,\n\tsetCompleted,\n\tsetCurrentPuzzleInput,\n}: Props) => {\n\tconst { color, completed } = activity;\n\n\tconst getMessage = () => {\n\t\tlet message = \"\";\n\t\tfor (let i = 0; i < MESSAGE_DIGITS.length; i++) {\n\t\t\tfor (let j = 0; j < MESSAGE_DIGITS[i].length; j++) {\n\t\t\t\tif (typeof MESSAGE_DIGITS[i][j] === \"string\") {\n\t\t\t\t\tmessage += MESSAGE_DIGITS[i][j];\n\t\t\t\t} else {\n\t\t\t\t\tconst letter = currentPuzzleInput[(MESSAGE_DIGITS[i][j] as number) - 1];\n\t\t\t\t\tmessage += (letter === \" \" ? \"_\" : letter).toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage += \" \";\n\t\t}\n\t\treturn message;\n\t};\n\n\treturn (\n\t\t<div className='word-puzzle-page'>\n\t\t\t<WordPuzzleBase\n\t\t\t\tinputWords={inputWords}\n\t\t\t\ttotalWordLength={totalWordLength}\n\t\t\t\tcurrentPuzzleInput={currentPuzzleInput}\n\t\t\t\tsetCompleted={setCompleted}\n\t\t\t\tsetCurrentPuzzleInput={setCurrentPuzzleInput}\n\t\t\t/>\n\t\t\t<span className='description'>\n\t\t\t\t<Prompt text={WORD_PUZZLE_DESCRIPTION} />\n\t\t\t\t<p className='word-puzzle-answer' style={{ border: `4px ${color} solid` }}>\n\t\t\t\t\t{getMessage()}\n\t\t\t\t</p>\n\t\t\t\t{completed && <Alert severity='success'>well done!</Alert>}\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\n\nimport { BasicPage } from \"../basic-page\";\n\nconst WORKOUT_DESCRIPTION = `eyesight may not be your strength\nbut this one will test your height and length\nwe could be jocks instead of being nerds\nsearch for a total of 6 words\nevery day we skip we seem to regret\nlook for things you have while you sweat\nyou might be sore there's no escape\ncome on go find them let's get in shape`;\n\ninterface Props {\n\tactivity: Activity;\n\tsetCompleted: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const WorkoutPage = ({ activity, setCompleted }: Props) => {\n\treturn <BasicPage activity={activity} description={WORKOUT_DESCRIPTION} setCompleted={setCompleted} />;\n};\n","import React from \"react\";\n\nimport Box from \"@material-ui/core/Box\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { AboutPage } from \"./about/about-page\";\nimport { CakePage } from \"./cake/cake-page\";\nimport { DancePage } from \"./dance/dance-page\";\nimport { FoodPage } from \"./food/food-page\";\nimport { SchedulePage } from \"./schedule/schedule-page\";\nimport { ShowsPage } from \"./shows/shows-page\";\nimport { WordPuzzlePage } from \"./word-puzzle/word-puzzle-page\";\nimport { WorkoutPage } from \"./workout/workout-page\";\nimport { Color } from \"../constants\";\n\nimport \"../styles/app.scss\";\n\nconst ABOUT_RHYME = `hope you like rhymes / it's puzzle time`;\nconst CAKE_RHYME = `take a break / make a cake`;\nconst DANCE_RHYME = `what is the chance / learn a tiktok dance`;\nconst FOOD_RHYME = `what's cookin' / good lookin'`;\nconst SHOWS_RHYME = `leave it to the pros / watch some shows`;\nconst WORKOUT_RHYME = \"morning with babs / get those abs\";\nconst WORD_PUZZLE_RHYME = `can't get thinner / let's eat dinner`;\n\nconst WORD_PUZZLE_WORDS = [\"almond\", \"pine nut\", \"pecan\", \"cashew\", \"hazelnut\", \"walnut\", \"brazil nut\"];\nconst TOTAL_WORD_LENGTH = WORD_PUZZLE_WORDS.reduce((currentTotalLength, word) => {\n\treturn currentTotalLength + word.length;\n}, 0);\n\ninterface TabPanelProps {\n\tchildren?: React.ReactNode;\n\tindex: any;\n\tvalue: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n\tconst { children, value, index } = props;\n\n\treturn (\n\t\t<div\n\t\t\trole='tabpanel'\n\t\t\thidden={value !== index}\n\t\t\tid={`simple-tabpanel-${index}`}\n\t\t\taria-labelledby={`simple-tab-${index}`}\n\t\t>\n\t\t\t{value === index && (\n\t\t\t\t<Box p={3}>\n\t\t\t\t\t<Typography>{children}</Typography>\n\t\t\t\t</Box>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport const App = () => {\n\tconst [selectedTabIndex, setSelectedTabIndex] = React.useState(0);\n\n\tconst [aboutActivityCompleted, setAboutActivityCompleted] = React.useState(false);\n\tconst [cakeActivityCompleted, setCakeActivityCompleted] = React.useState(false);\n\tconst [danceActivityCompleted, setDanceActivityCompleted] = React.useState(false);\n\tconst [foodActivityCompleted, setFoodActivityCompleted] = React.useState(false);\n\tconst [showsActivityCompleted, setShowsActivityCompleted] = React.useState(false);\n\tconst [workoutActivityCompleted, setWorkoutActivityCompleted] = React.useState(false);\n\tconst [wordPuzzleCompleted, setWordPuzzleCompleted] = React.useState(false);\n\tconst [wordPuzzleInput, setWordPuzzleInput] = React.useState(\" \".repeat(TOTAL_WORD_LENGTH));\n\n\tconst [scheduleArray, setScheduleArray] = React.useState<Activity[]>([]);\n\tconst [everythingCompleted, setEverythingCompleted] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tconst updatedSchedule: Activity[] = [\n\t\t\t{\n\t\t\t\tanswer: ABOUT_RHYME,\n\t\t\t\tcolor: Color.RED,\n\t\t\t\tcompleted: aboutActivityCompleted,\n\t\t\t},\n\t\t\t{\n\t\t\t\tanswer: WORKOUT_RHYME,\n\t\t\t\tcolor: Color.ORANGE,\n\t\t\t\tcompleted: workoutActivityCompleted,\n\t\t\t},\n\t\t\t{\n\t\t\t\tanswer: FOOD_RHYME,\n\t\t\t\tcolor: Color.YELLOW,\n\t\t\t\tcompleted: foodActivityCompleted,\n\t\t\t},\n\t\t\t{\n\t\t\t\tanswer: DANCE_RHYME,\n\t\t\t\tcolor: Color.GREEN,\n\t\t\t\tcompleted: danceActivityCompleted,\n\t\t\t},\n\t\t\t{\n\t\t\t\tanswer: CAKE_RHYME,\n\t\t\t\tcolor: Color.BLUE,\n\t\t\t\tcompleted: cakeActivityCompleted,\n\t\t\t},\n\t\t\t{\n\t\t\t\tanswer: WORD_PUZZLE_RHYME,\n\t\t\t\tcolor: Color.PURPLE,\n\t\t\t\tcompleted: wordPuzzleCompleted,\n\t\t\t},\n\t\t\t{\n\t\t\t\tanswer: SHOWS_RHYME,\n\t\t\t\tcolor: Color.MAGENTA,\n\t\t\t\tcompleted: showsActivityCompleted,\n\t\t\t},\n\t\t];\n\n\t\tsetScheduleArray(updatedSchedule);\n\n\t\tsetEverythingCompleted(\n\t\t\taboutActivityCompleted &&\n\t\t\t\tfoodActivityCompleted &&\n\t\t\t\tworkoutActivityCompleted &&\n\t\t\t\twordPuzzleCompleted &&\n\t\t\t\tshowsActivityCompleted &&\n\t\t\t\tdanceActivityCompleted &&\n\t\t\t\tcakeActivityCompleted\n\t\t);\n\t}, [\n\t\taboutActivityCompleted,\n\t\tfoodActivityCompleted,\n\t\tworkoutActivityCompleted,\n\t\twordPuzzleCompleted,\n\t\tshowsActivityCompleted,\n\t\tdanceActivityCompleted,\n\t\tcakeActivityCompleted,\n\t]);\n\n\tconst handleChange = (event: React.ChangeEvent<{}>, newIndex: number) => {\n\t\tsetSelectedTabIndex(newIndex);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Paper square>\n\t\t\t\t<Tabs\n\t\t\t\t\tvalue={selectedTabIndex}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tindicatorColor='primary'\n\t\t\t\t\ttextColor='primary'\n\t\t\t\t\tcentered\n\t\t\t\t>\n\t\t\t\t\t<Tab label='schedule' />\n\t\t\t\t\t<Tab label='about' />\n\t\t\t\t\t<Tab label='happy' />\n\t\t\t\t\t<Tab label='birthday' />\n\t\t\t\t\t<Tab label='to' />\n\t\t\t\t\t<Tab label='you' />\n\t\t\t\t\t<Tab label='cha' />\n\t\t\t\t\t<Tab label='cha cha' />\n\t\t\t\t</Tabs>\n\t\t\t</Paper>\n\t\t\t<TabPanel value={selectedTabIndex} index={0}>\n\t\t\t\t<SchedulePage scheduleArray={scheduleArray} everythingCompleted={everythingCompleted} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={1}>\n\t\t\t\t<AboutPage activity={scheduleArray[0]} setCompleted={setAboutActivityCompleted} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={2}>\n\t\t\t\t<WorkoutPage activity={scheduleArray[1]} setCompleted={setWorkoutActivityCompleted} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={3}>\n\t\t\t\t<FoodPage activity={scheduleArray[2]} setCompleted={setFoodActivityCompleted} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={4}>\n\t\t\t\t<DancePage activity={scheduleArray[3]} setCompleted={setDanceActivityCompleted} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={5}>\n\t\t\t\t<CakePage activity={scheduleArray[4]} setCompleted={setCakeActivityCompleted} />\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={6}>\n\t\t\t\t<WordPuzzlePage\n\t\t\t\t\tactivity={scheduleArray[5]}\n\t\t\t\t\tcurrentPuzzleInput={wordPuzzleInput}\n\t\t\t\t\tinputWords={WORD_PUZZLE_WORDS}\n\t\t\t\t\ttotalWordLength={TOTAL_WORD_LENGTH}\n\t\t\t\t\tsetCompleted={setWordPuzzleCompleted}\n\t\t\t\t\tsetCurrentPuzzleInput={setWordPuzzleInput}\n\t\t\t\t/>\n\t\t\t</TabPanel>\n\t\t\t<TabPanel value={selectedTabIndex} index={7}>\n\t\t\t\t<ShowsPage activity={scheduleArray[6]} setCompleted={setShowsActivityCompleted} />\n\t\t\t</TabPanel>\n\t\t</div>\n\t);\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n\ttypography: {\n\t\tbutton: {\n\t\t\ttextTransform: \"none\",\n\t\t},\n\t},\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nimport { App } from \"./components/app\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n\t<ThemeProvider theme={theme}>\n\t\t<App />\n\t</ThemeProvider>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}